version: '3.8'

services:
  api:
    build: ./api
    restart: always

  nginx:
    build: ./nginx
    ports:
      - "8080:80" # Truy cập Nginx từ máy thật qua cổng 8080
    depends_on:
      - api

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11
    command: ["-nginx.scrape-uri", "http://nginx/metrics"]
    depends_on:
      - nginx
    restart: always

  prometheus:
    image: prom/prometheus:v2.37.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: always

  grafana:
    image: grafana/grafana:8.5.2
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    restart: always
  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"    # cho container khác và host
      - "9999:9999"    # JMX Prometheus
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      # Listener cho cả trong Docker và host ngoài
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=GcZtMYVQSmS1GiII4Vui5g
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      # JMX Prometheus Agent
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9998 -Dcom.sun.management.jmxremote.rmi.port=9998 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka
      - JAVA_TOOL_OPTIONS=-Xms512m -Xmx1024m -javaagent:/opt/jmx/jmx_prometheus_javaagent-1.3.0.jar=9999:/opt/jmx/kafka-jmx.yml
      - KAFKA_CFG_JMX_PORT=9998
    volumes:
      - ./kafka:/bitnami/kafka
      - ./jmx/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx/jmx_prometheus_javaagent-1.3.0.jar
      - ./jmx/kafka-jmx.yml:/opt/jmx/kafka-jmx.yml
    networks:
      - monitoring

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_METRICS_PORT=9998
      - KAFKA_CLUSTERS_0_METRICS_TYPE=JMX
      - KAFKA_CLUSTERS_0_METRICS_ENABLED=true
      - AUTH_TYPE=LOGIN_FORM
      - SPRING_SECURITY_USER_NAME=admin
      - SPRING_SECURITY_USER_PASSWORD=kafka_pass
      - SPRING_SECURITY_USER_ROLES=ADMIN
    depends_on:
      - kafka
    restart: unless-stopped
    networks:
      - monitoring

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    networks:
      - monitoring

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=minio_pass
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO Console
    volumes:
      - ./minio:/data
    networks:
      - monitoring

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  monitoring:
    external: true